import * as fs from 'fs';
import { RequestData } from '../data/requestData';
import { Feature } from '../data/feature';
import { Export } from './export';
import { handler } from './handler';

export class PptxExport extends Export {
  pptx;
  fileExt = 'pptx';

  sourceText = 'Source: The Eviction Lab at Princeton University: www.evictionlab.org. ' +
   `Data extracted on ${new Date().toISOString().slice(0, 10)}`;
  colors = ['e24000', '434878', '2c897f'];

  titleParams = {
    align: 'c', font_size: 28, isTextBox: true, w: 9, h: 0.7, x: 0.5, y: 0.5
  };
  sourceParams = {
    align: 'c', font_size: 12, x: 0.55, y: 7.06, w: 8.91, h: 0.33
  };
  bulletParams = {
    font_size: 18, color: '000000', margin: 1, w: 9, x: 0.5, y: 5.35, h: 1.48
  };
  chartParams = {
    x: 1.25, y: 1.5, w: 7.5, h: 5, chartColors: this.colors,
    dataBorder: { pt: 2, color: 'FFFFFF' }, fill: 'ffffff'
  };

  constructor(requestData: RequestData) {
    super(requestData);
    this.key = this.createKey(requestData);
    // Recreating each time to avoid appending to previous buffer based on this issue:
    // https://github.com/gitbrent/PptxGenJS/issues/38#issuecomment-279001048
    delete require.cache[require.resolve('pptxgenjs')];
    this.pptx = require('pptxgenjs');
  };

  makeYearArr(yearRange: number[]): number[] {
    let years = [];
    for (let year = yearRange[0]; year <= yearRange[yearRange.length - 1]; ++year) {
      years.push(year);
    }
    return years;
  }

  createTitleSlide(features: Feature[]): void {
    this.pptx.setLayout('LAYOUT_4x3');

    const titleSlide = this.pptx.addNewSlide({ bkgd: 'ffffff' });
    let featureNames;
    if (features.length === 1) {
      featureNames = features[0].properties.n;
    } else if (features.length === 2) {
      featureNames = features.map(f => f.properties.n).join(' and ');
    } else {
      featureNames = `${features[0].properties.n}, ${features[1].properties.n}, and ${features[2].properties.n}`;
    }

    titleSlide.addText(`Understanding Eviction in ${featureNames}`, {
      align: 'c', x: 1.21, y: 2.61, w: 7.59, h: 1.8, color: '000000', fill: 'FFFFFF', font_size: 35, isTextBox: true
    });

    titleSlide.addText(
      'A PowerPoint Presentation generated by The Eviction Lab at Princeton University\n' +
      'For more information, go to www.evictionlab.org', {
        align: 'c', x: 2.21, y: 4.76, w: 5.58, h: 1.36, color: 'FFFFFF', font_size: 19, isTextBox: true
      }
    );

    titleSlide.addText(this.sourceText, { ...this.sourceParams, color: 'ffffff' });
  }

  createFeatureSlides(feature: Feature, index: number): void {
    const slideOne = this.pptx.addNewSlide({ bkgd: 'ffffff' });
    const year = this.years[this.years.length - 1];
    const daysInYear = year % 4 === 0 ? 366 : 365;
    const yearSuffix = year.toString().slice(2)

    slideOne.addText(
      `${feature.properties.n} EXPERIENCED ${feature.properties[`e-${yearSuffix}`]} EVICTIONS IN ${year}`,
      { ...this.titleParams, y: 3.75, color: this.colors[index] }
    );

    slideOne.addText(
      [
        {
          text: `This amounts to ${(year / daysInYear).toFixed(2)} of evictions per day`,
          options: { bullet: true }
        },
        {
          text: `The eviction rate was ${feature.properties[`er-${yearSuffix}`]} per 100 renter-occupied households`,
          options: { bullet: true }
        }
      ], this.bulletParams
    );

    slideOne.addText(this.sourceText, { ...this.sourceParams, color: '000000' });
  }

  createDataSlides(features: Feature[]): void {
    if (features.length > 1) {
      // Create comparison if more than one feature provided
      const barChartSlide = this.pptx.addNewSlide({ bkgd: 'ffffff' });
      const year = this.years[this.years.length - 1];

      barChartSlide.addText(`Eviction Rates in ${year}`, this.titleParams);
      barChartSlide.addChart(this.pptx.charts.BAR, [{
        name: 'Eviction Rates',
        labels: features.map(f => f.properties.n),
        values: features.map(f => f.properties[`er-${year.toString().slice(2)}`])
      }], {
        ...this.chartParams, valAxisTitle: 'Eviction Rate', showTitle: false,
        barGapWidthPct: 80, barDir: 'col' });
    }

    // Create line chart
    const lineChartSlide = this.pptx.addNewSlide({ bkgd: 'ffffff' });
    const years = this.makeYearArr(this.years).map(y => y.toString());

    lineChartSlide.addText('Eviction Rates Over Time', this.titleParams);

    const lineChartData = features.map(f => {
      return {
        name: f.properties.n,
        labels: years,
        values: years.map(y => f.properties[`er-${y.slice(2)}`])
      };
    });
    lineChartSlide.addChart(this.pptx.charts.LINE, lineChartData, this.chartParams);

    // Create general stats slide
  }

  async saveWrapper(): Promise<any> {
    return new Promise((resolve, reject) => {
      this.pptx.save('jszip', f => { resolve(f); }, 'nodebuffer');
    });
  }

  async createFile(): Promise<Buffer> {
    this.createTitleSlide(this.features);
    this.features.forEach((f, i) => this.createFeatureSlides(f, i));
    this.createDataSlides(this.features);
    return await this.saveWrapper().then((f) => { return f; });
  }
}

export async function fileHandler(event, context, callback): Promise<void> {
  return await handler(PptxExport, event, context, callback);
}